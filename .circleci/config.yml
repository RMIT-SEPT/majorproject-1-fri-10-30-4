version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.3.0
  aws-cli: circleci/aws-cli@1.3.0

jobs:
  backend_test:
    docker:
      - image: circleci/openjdk:11.0.8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            - majorProject-backend-{{ checksum "BackEnd/majorProject/pom.xml"}}
            - majorProject-backend-
      #Download required maven files to disk.
      - run:
          name: Downloading maven Dependencies
          command: mvn dependency:go-offline
          working_directory: BackEnd/majorProject
      #Run maven test
      - run:
          name: Maven tests
          command: mvn test
          working_directory: BackEnd/majorProject
      #Upload surefire test results.
      - store_test_results:
          path: BackEnd/majorProject/target/surefire-reports

  backend_build:
    docker:
        - image: circleci/openjdk:11.0.8-jdk
    steps:
      - checkout

      # restore the saved cache after the first run or if `pom.xml` has changed
      #    Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys: 
            - majorProject-backend-{{ checksum "BackEnd/majorProject/pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - majorProject-backend-

      # gets the project dependencies
      - run:
          name: Download maven dependencies.
          command: mvn dependency:go-offline
          working_directory: BackEnd/majorProject

      # saves the project dependencies
      - save_cache:
          paths:
            - ~/.m2
          key: majorProject-backend-{{ checksum "BackEnd/majorProject/pom.xml" }}

      # Maven builds the project.
      - run:
          name: Build java application with maven
          command: mvn install -DskipTests
          working_directory: BackEnd/majorProject

      # uploads the test metadata from path below so that it can show up in the CircleCI dashboard.
      #    Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      - store_test_results:
          path: BackEnd/majorProject/target/surefire-reports

      # store the uberjar as an artifact
      #    Upload artifacts for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
      - store_artifacts:
          path: BackEnd/majorProject/target/majorProject-0.0.1-SNAPSHOT.jar

      #Persist backend files to a workspace.
      - persist_to_workspace:
          root: BackEnd
          paths:
            - majorProject/*

  backend_image_build:
    docker:
      - image: circleci/openjdk:11.0.8-jdk
    environment:
      ECR_REPOSITORY_NAME: springbootdemo
      FULL_IMAGE_NAME: 594973024332.dkr.ecr.us-east-1.amazonaws.com/springbootdemo:latest
    steps:
      - attach_workspace:
          at: /tmp/BackEnd

      - setup_remote_docker:
          version: 19.03.13
      #Build dockerfile
      - run:
          name: Building backend docker image
          command: docker build -t 929269043601.dkr.ecr.us-east-1.amazonaws.com/majorproject:backend_latest ./
          working_directory: /tmp/BackEnd/majorProject/
      
      - run:
          name: Install dependencies for AWS
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            sudo apt-get install python3-pip
            sudo pip3 install --upgrade awscli

      - run:
          name: Push image
          command: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 929269043601.dkr.ecr.us-east-1.amazonaws.com/majorproject
            
      #Push built image to remote repo
      - run:
          name: Push docker image to remote repo
          command: docker push 929269043601.dkr.ecr.us-east-1.amazonaws.com/majorproject:backend_latest
          working_directory: BackEnd/majorProject

  frontend_test:
    docker:
      - image: circleci/node:12.18.4-stretch
    
    steps:
      - checkout

      - run:
          command: ls

  frontend_build:
    docker:
      - image: circleci/node:12.18.4-stretch
    
    steps:
      - checkout

      - restore_cache:
          keys:
            - majorProject-frontend-{{ checksum "FrontEnd/major_project/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - majorProject-frontend-

      - run: 
          command: npm install
          working_directory: FrontEnd/major_project

      - save_cache:
          paths:
            - FrontEnd/major_project/node_modules
            - ~/.npm
            - ~/.cache
          key: majorProject-frontend-{{ checksum "FrontEnd/major_project/package.json" }}

      - store_artifacts:
          path: FrontEnd/major_project/build

      #Persist frontend files to a workspace.
      - persist_to_workspace:
          root: FrontEnd
          paths:
            - major-project/*

  frontend_image_build:
    docker:
      - image: circleci/openjdk:11.0.8-jdk

    steps:
      - attach_workspace:
          at: /tmp/BackEnd

      - setup_remote_docker:
          version: 19.03.13

      #Build dockerfile
      - run:
          name: Building frontend docker image
          command: docker build -t haz1123/majorproject:frontend_latest ./
          working_directory: /tmp/FrontEnd/major-project
      
      #Login to docker
      - run:
          name: Login to docker
          command: docker login --username haz1123 --password $HarrisonCIToken

      #Push built image to remote repo
      - run:
          name: Push docker image to remote repo
          command: docker push haz1123/majorproject:frontend_latest
          working_directory: FrontEnd/major-project

workflows:
  backend:
    jobs:
      - backend_test
      - backend_build:
          requires:
            - backend_test
          filters:
            branches:
              only: master
      - backend_image_build:
          requires:
            - backend_build
          filters:
            branches:
              only: master

  frontend:
    jobs:
      - frontend_test
      - frontend_build:
          requires:
            - frontend_test
          filters:
            branches:
              only: master
      - frontend_image_build:
          requires:
            - frontend_build
          filters:
            branches:
              only: master